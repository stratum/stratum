// Copyright 2018 Google LLC
// Copyright 2018-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

option cc_generic_services = false;

package stratum.hal;

import "stratum/hal/lib/common/common.proto";

message CachePolicyConfig {
  enum CachePolicyType {
    // There is no cache, values retrieved every time they are read
    NO_CACHE = 0;
    // Never updated, all attrributes are set in the constructor
    NEVER_UPDATE = 1;
    // Values updated the first time they are called only
    FETCH_ONCE = 2;
    // Values remain cacehd for the given duration
    TIMED_CACHE = 3;
  }
  // Cache Policy Type
  CachePolicyType type = 1;
  // Timed Cache value (if type TIMED_CACHE)
  int32 timed_value = 2;
}

// This message encapsulates all the data needed to specify a line card.
message PhalCardConfig {
  // This message encapsulates all the data needed to specify a physical
  // port on a switch chassis.
  message Port {
    // The 1-base index of the port corresponding the transceiver
    // module.
    int32 port = 1;
    // Physical Port type
    PhysicalPortType physical_port_type = 2;
    // Attribute DB Cache Policy
    CachePolicyConfig cache_policy = 3;
    // Transceiver module presence path.
    string transceiver_presence_path = 5;
    // Transceiver module EEPROM path (to read vendor name, part #, etc.).
    string transceiver_info_path = 6;
    // Transceiver module TX disable path for all the 4 channels.
    repeated string tx_disable_paths = 7;
  }
  // The 1-base index of the slot (aka linecard).
  int32 slot = 1;
  repeated Port ports = 2;
  // Attribute DB Cache Policy
  CachePolicyConfig cache_policy = 3;
}

// This message encapsulates all of the data needed to specify a fan tray.
message PhalFanTrayConfig {
  message Fan {
    // The 1-base index of the fan within its tray.
    int32 slot = 1;
    // Attribute DB Cache Policy
    CachePolicyConfig cache_policy = 2;
    // Path to read the current fan speed.
    string fan_tachometer_path = 3;
    // Path to set the fan speed.
    string fan_control_path = 4;
  }
  int32 slot = 1; // 1-base slot number
  string tray_presence_path = 2;
  // Fan tray info EEPROM path.
  string tray_info_path = 3;
  repeated Fan fans = 4;
  // Attribute DB Cache Policy
  CachePolicyConfig cache_policy = 5;
}

// This message encapsulates all of the data needed to specify a psu tray.
message PhalPsuTrayConfig {
  message Psu {
    // The 1-base index of the Psu within its chassis.
    int32 slot = 1;
    // Attribute DB Cache Policy
    CachePolicyConfig cache_policy = 2;
  }
  repeated Psu psus = 2;
  // Attribute DB Cache Policy
  CachePolicyConfig cache_policy = 3;
}

// This message encapsulates the data required by PHAL to be able to find,
// write and read LEDs that a platform supports.
message PhalLedGroupConfig {
  message Led {
    // The 1-base Led index
    int32 led_index = 1;
    // Attribute DB Cache Policy
    CachePolicyConfig cache_policy = 2;
    LedType led_type = 3;
    // Different type of LED has different size of control path. Some of them
    // are GPIO bus while some of them are FPGA bit path. Lets abstract all of
    // them to led_control_path. The order of the led_control_path in config is
    // critical.
    repeated string led_control_path = 4;
  }
  repeated Led leds = 2;
  // Attribute DB Cache Policy
  CachePolicyConfig cache_policy = 3;
}

// ThermalConfig encapsulates the data required by PHAL to be able to find
// and read Thermal information that a platform supports.
message PhalThermalGroupConfig {
  message Thermal {
    // The 1-base Thermal index
    int32 thermal_index = 1;
    // Attribute DB Cache Policy
    CachePolicyConfig cache_policy = 2;
  }
  repeated Thermal thermals = 2;
  // Attribute DB Cache Policy
  CachePolicyConfig cache_policy = 3;
}

// Message used to initialize the PHAL on real hardware.
message PhalInitConfig {
  repeated PhalCardConfig cards = 1;
  // Boolean which determines whether the slot filed is supposed to be
  // automatically added by the stack. This is used for the case where slot is
  // not known beforehand (e.g. in multi-linecard systems) and needs to be
  // determined after pushing the chassis config. If set to true, slot must be
  // set to zero.
  bool auto_add_slot = 2;
  repeated PhalFanTrayConfig fan_trays = 3;
  repeated PhalPsuTrayConfig psu_trays = 4;
  repeated PhalLedGroupConfig led_groups = 5;
  repeated PhalThermalGroupConfig thermal_groups = 6;
  // Default Attribute DB Cache Policy
  CachePolicyConfig cache_policy = 7;
}
