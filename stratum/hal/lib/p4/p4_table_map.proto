// Copyright 2018 Google LLC
// Copyright 2018-present Open Networking Foundation
// SPDX-License-Identifier: Apache-2.0


// This file declares proto messages that facilitate the mapping between P4
// runtime RPC requests/responses and a "flow entry" that can be understood by
// HAL table management code.
//
// TODO(unknown): Provide a specific reference to the "flow entry" definition.

syntax = "proto3";

option cc_generic_services = false;

package stratum.hal;

import "stratum/hal/lib/p4/common_flow_entry.proto";
import "stratum/public/proto/p4_annotation.proto";
import "stratum/public/proto/p4_table_defs.proto";
import "p4/config/v1/p4info.proto";

// Each P4 object type has "descriptor" data to help define the mapping from
// runtime RPC to HAL flow entry.  Each descriptor contains the following
// general types of data:
// - A type to identify the P4 object in a HAL flow entry.  For example, a
//   P4 field match on the Ethernet destination address is identified as
//   P4_FIELD_TYPE_ETH_DST.
// - Optional device_data to help the HAL switch implementation determine how
//   the P4 object behaves.  Example 1: Some P4 fields may use device_data to
//   define UDFs in the SDK.  Example 2: Some P4 tables may use device_data to
//   set up custom table operation via ACLs or other progammable logic in
//   switch chip.
// - P4 object specific data for P4 runtime RPC translation, which is defined
//   in more detail by the descriptor messages below.
// The p4c compiler backend for Stratum switches generates the descriptor data
// into a P4TableMap as one of its output files.  The P4TableMap map becomes
// part of the pipeline spec that switches receive during P4 runtime
// configuration.

// P4DeviceProgramData provides field/action/table descriptor storage for any
// device or vendor dependent data that the HAL switch implementation needs
// to set up the forwarding logic for the associated P4 object.  It contains:
// - A name to uniquely identify and/or describe the data in this message.
// - The data that the HAL switch implementation needs to specify the
//   behavior of the P4 table/field/action in a device-specific context.  This
//   data has meaning only to the switch implementation; it is opaque to the
//   p4c extension, the P4TableMapper, and the P4InfoManager.
// TODO(unknown): Consider changing the data field to google::protobuf::Any and
//                 packing/unpacking relative to a target-specific proto.
// TODO(unknown): Would it be useful to have the option for two sets of
//                 P4DeviceProgramData per object, with one set for P4 config
//                 setup and the other set to be attached to each runtime flow?
message P4DeviceProgramData {
  string name = 1;
  bytes data = 2;
}

// A P4TableDescriptor has data about how to map a P4 runtime table write
// into a common flow entry.
message P4TableDescriptor {
  // Mapping fields in a P4TableDescriptor are:
  //  type - Identifies the type of table in an output flow entry.
  //  pipeline_stage - Gives the forwarding pipeline stage that p4c has
  //      assigned to the table.
  //  has_static_entries - Indicates whether the P4 program defines const
  //      entries for the table.  If true, the static entries are represented
  //      by a P4Runtime WriteRequest in another part of the P4PipelineConfig.
  //      In the current version of the P4 language, the presence of static
  //      entries means the table is immutable with respect to write operations
  //      via the P4Runtime service.
  //  internal_match_fields - lists any match keys needed for the hardware
  //      table that are not explicitly defined by the P4 program.  For
  //      example, P4_TABLE_L3_IP needs additional VRF IDs for some P4
  //      L3 table definitions.
  //  device_data - Optional data for the HAL switch to use for defining and
  //      setting up the table.
  //  valid_headers - Indicate whether the P4 program restricts table usage to
  //      certain types of protocol headers, i.e. the table apply is
  //      conditional on a header.isValid() evaluation.  If valid_headers
  //      is empty, the P4 program applies the table without any header type
  //      constraints.  A single entry means that the P4 program only applies
  //      the table when the given header type is valid.  Multiple entries
  //      mean all of the specified header types must be valid before the
  //      P4 program applies the table.
  // TODO(unknown): Is it possible to deprecate the type field and
  // replace all of its references with pipeline_stage?
  P4TableType type = 1;
  P4Annotation.PipelineStage pipeline_stage = 2;
  bool has_static_entries = 3;
  repeated MappedField internal_match_fields = 4;
  repeated P4DeviceProgramData device_data = 5;
  repeated P4HeaderType valid_headers = 6;
}

// A P4FieldDescriptor contains information about how to map a PI header field
// from a TableWriteRequest into a common flow entry field.  It also has
// information to support header field references by P4 control and action
// statements.
message P4FieldDescriptor {
  // This enum specifies how table mapping should translate the PI field value
  // into a flow entry field value.  The same field could need different
  // conversions for different vendors.  For example, vendor A's SDK might
  // expect to see a MAC address as a uint64, whereas vendor B's SDK might
  // expect a byte array for a MAC address.
  enum P4FieldValueConversion {
    P4_CONVERT_UNKNOWN = 0;
    P4_CONVERT_RAW = 1;                // Raw value copy for P4-aware SDKs.
    P4_CONVERT_TO_U32 = 2;             // Example: exact match IPv4 address.
    P4_CONVERT_TO_U32_AND_MASK = 3;    // Example: IPv4 LPM match field.
    P4_CONVERT_TO_U64 = 4;             // Example: exact match MAC address.
    P4_CONVERT_TO_U64_AND_MASK = 5;    // Example: ternary match MAC address.
    P4_CONVERT_TO_BYTES = 6;           // Example: exact match IPv6 address.
    P4_CONVERT_TO_BYTES_AND_MASK = 7;  // Example: IPv6 LPM match field.

    // TODO(unknown): And so on for additional conversions.
  }

  // This message is a pseudo-map for field value conversions.  (A real proto
  // map<p4.config.v1.MatchField.MatchType, P4FieldValueConversion> is not allowed
  // because enums can't be keys.)  Match field conversions depend on table
  // context.  The same field may be an EXACT match in one table, an LPM match
  // in another table, or even a TERNARY match in a third table.  The table's
  // P4Info match_type for the field becomes the key to get the conversion
  // value.
  message P4FieldConversionEntry {
    p4.config.v1.MatchField.MatchType match_type = 1;
    P4FieldValueConversion conversion = 2;

    // TODO(unknown): This per-conversion width is replaced by the overall
    // P4FieldDescriptor bit_width below.  All code references have been
    // removed.  The field itself can be removed after all test file references
    // are cleaned up.
    int32 bit_width = 3 [deprecated = true];
  }

  // This message applies to local metadata fields whose only purpose is to
  // act as match keys for tables in "hidden" stages.  In general, an action in
  // one table will assign these fields a constant value to look up another
  // action in the later hidden table.  Packet encap and decap use this
  // technique to decide whether to encap/decap in one table while deferring
  // the header push/pop actions to a later table.
  //  table_name - Identifies a table that uses this field as a key.
  // TODO(unknown): This is a provisional definition.  Other items for
  // consideration:
  //  - Should this identify tables in pairs, i.e. the table that assigns
  //    the metadata together with the table that uses it as a key?
  //  - Should this include a list of valid values for the key, which could
  //    be derived at compile time from the hidden table's static entries.
  message P4MetadataKey {
    string table_name = 1;
  }

  // Mapping fields for match fields are:
  //  type - Identifies the field in an output flow entry.
  //  valid_conversions - Indicates how to derive the flow entry field value
  //      from the P4 match field's value.
  //  bit_offset - Gives the field's offset in bits from the beginning of
  //      its encapsulating header to the first (most significant) bit in
  //      the field.
  //  bit_width - Gives the field's width in bits.
  //  device_data - Optional data for the HAL switch to use for defining and
  //      setting up the field.
  //  is_local_metadata - Flags fields that are defined by the P4 program's
  //      local metadata.
  //  header_type - Identifies the protocol header that defines this field.
  //  metadata_keys - When type is P4_FIELD_TYPE_METADATA_MATCH, provides
  //      information about a local metadata field's usage in indirect table
  //      lookups.
  //  value_set - Contains the name of any parser value set that influences
  //      the field's properties and behavior.  The value set is only present
  //      when the field type is P4_FIELD_TYPE_UDF_VALUE_SET.
  P4FieldType type = 1;
  repeated P4FieldConversionEntry valid_conversions = 2;
  int32 bit_offset = 3;
  int32 bit_width = 4;
  repeated P4DeviceProgramData device_data = 5;
  bool is_local_metadata = 6;
  P4HeaderType header_type = 7;
  repeated P4MetadataKey metadata_keys = 8;
  string value_set = 9;
}

// A P4ActionDescriptor defines how to map a P4 runtime action into a common
// flow entry action.  The descriptor supports mapping actions from within a PI
// TableWriteRequest or a PI ActionProfileWriteRequest.  The P4ActionDescriptor
// represents three general types of operations:
// 1) Assignment of values to fields, such as:
//    hdr.ethernet.src_addr = <action-param>;
//    standard_metadata.egress_spec = <action-param>;
//    local_metadata.encap_type = <constant-value>;
// 2) P4 primitive and extern calls, such as:
//    mark_to_drop();
//    clone3(<clone-parameters>);
// 3) Meter-based operations, such as:
//    clone3(<clone-parameters>) if meter is GREEN;
//    mark_to_drop() when meter is not GREEN;
// A P4ActionDescriptor has multiple ways to encode operations within the
// action, which correspond to the types of operations listed above:
// 1) Very simple operations can be encoded as a P4ActionOp value, such as
//    P4_ACTION_OP_DROP or P4_ACTION_OP_NOP.
// 2) More sophisticated operations requiring parameters or operands are
//    encoded in a P4ActionInstructions message.
// 3) Metering operations can be encoded as either item 1 or 2 above with
//    a set of color-based qualifiers.
// P4ActionDescriptors represent two sources of actions.  The first source is
// actions that the Stratum backend compiles directly from the P4 program.
// These actions correspond 1-to-1 with actions in the program's P4Info.  The
// second source is actions that the Stratum backend generates internally.
// The internal actions generally represent a merger of actions from multiple
// logical tables into a single combined action for a physical table.  Internal
// actions do not have a corresponding P4Info entry.
message P4ActionDescriptor {
  // The P4ActionInstructions message defines how to map operations that involve
  // parameters or operands.  In many cases, the target is a header-field that
  // gets modified by a single parameter value.  In other cases, an extern
  // method or primitive function needs one or more parameter values.
  //  assigned_value - encodes the operand or parameter value to be assigned
  //      to destination_field_name and/or used as an argument to primitives.
  //  destination_field_names - soon-to-be deprecated repeated field variation
  //      of destination_field_name.
  //      TODO(teverman): This repeated field was intended for assignments
  //      where the P4 program assigns the same source value to multiple
  //      destinations.  The backend now outputs multiple assignments in this
  //      situation instead of trying to combine them.  This repeated field
  //      will be deprecated and replaced with the single non-repeated
  //      destination_field_name over several CLs.
  //  primitives - indicate that the assigned_value is used as an argument
  //      to the primitive.
  //  destination_field_name - identifies the header-field when the
  //      assigned_value is the source value for a destination field in an
  //      assignment statement.  When the assigned_value source represents a
  //      complete header, destination_field_name contains a header name
  //      instead of an individual field name.
  // Some primitives could require multiple action parameters, but there are
  // currently no known use cases.
  message P4ActionInstructions {
    P4AssignSourceValue assigned_value = 1;
    repeated string destination_field_names = 2;
    repeated P4ActionOp primitives = 3;
    string destination_field_name = 4;
  }

  // The P4MeterColorAction message specifies action operations that are
  // conditional based on packet metering decisions.
  //  colors - list one or more colors that select the meter operations.
  //  ops - list the operations that occur for packets matching one
  //      of the values in colors.
  // For example, to drop all non-green packets, the P4MeterColorAction
  // would be encoded like this:
  //  {
  //    colors: P4_METER_YELLOW
  //    colors: P4_METER_RED
  //    ops {
  //      primitives: P4_ACTION_OP_DROP
  //    }
  //  }
  // To clone all green packets, the P4MeterColorAction would be encoded
  // like this:
  //  {
  //    colors: P4_METER_GREEN
  //    ops {
  //      constant_param: <clone-port-ID>
  //      primitives: P4_ACTION_OP_CLONE
  //    }
  //  }
  message P4MeterColorAction {
    repeated P4MeterColor colors = 1;
    repeated P4ActionInstructions ops = 2;
  }

  // The P4TunnelAction message identifies any potential tunneling encap/decap
  // operations that an action performs.  The presence of P4TunnelActions means
  // the action does something to invalidate or validate packet headers, which
  // is a necessary but not sufficient condition to perform tunneling.
  //  tunnel_op - DEPRECATED.
  //  header_name - name of the header to which header_op applies.
  //  header_op - indicates whether the action validates or invalidates
  //      header_name.
  message P4TunnelAction {
    P4TunnelOp tunnel_op = 1 [deprecated = true];
    string header_name = 2;
    P4HeaderOp header_op = 3;
  }

  // The P4TunnelProperties message expresses an action's encap/decap behavior
  // for tunneled packets.
  //  encap_inner_header - deprecated.
  //  decap_inner_headers - deprecated.
  //  is_gre_tunnel - marks a tunnel as GRE-encoded.
  //  ecn_value/dscp_value/ttl_value - specify the action taken for ECN, DSCP,
  //      and TTL during encap or decap.  At present, the only supported
  //      action is to copy the fields between headers as they are
  //      pushed/popped.
  //  encap_or_decap - any single P4TunnelProperties message contains either
  //      encap or decap properties, but not both.
  //    encap - contains properties specific to encap tunnels.
  //      encap_inner_headers - identifies the types of all possible inner
  //          headers in a tunnel initiation.  For example, encap_inner_headers
  //          contains P4_HEADER_IPV4 for any 4-in-6 tunnel.  P4 program actions
  //          manipulate a single inner header type, but p4c can choose to
  //          consolidate multiple actions into a single internal action that
  //          is common to multiple inner header types.
  //      encap_outer_header - identifies the outer header type in a tunnel
  //          initiation.  For example, encap_outer_header is P4_HEADER_IPV4
  //          for 4-in-4 and 6-in-4 tunnels.
  //    decap - contains properties specific to decap tunnels.
  //      decap_inner_headers - indicates the type of allowed headers that an
  //          action recognizes for tunnel decap or termination.  Stratum P4
  //          programs generally decap IPv4 and IPv6 inner headers in the same
  //          action, so the field repeats to cover both possibilities.
  message P4TunnelProperties {
    message EncapProperties {
      repeated P4HeaderType encap_inner_headers = 1;
      P4HeaderType encap_outer_header = 2;
    }

    message DecapProperties {
      repeated P4HeaderType decap_inner_headers = 1;
    }

    message TunnelFieldValue {
      oneof value_or_copy {
        bool copy = 1;
        // TODO(teverman): P4 programs can potentially assign DSCP/ECN/TTL
        // values via constant or action parameter; add a P4AssignSourceValue
        // or similar field to accommodate this behavior if P4 programs move
        // in this direction.
      }
    }

    P4HeaderType encap_inner_header = 1 [deprecated = true];
    repeated P4HeaderType decap_inner_headers = 2 [deprecated = true];
    bool is_gre_tunnel = 3;
    TunnelFieldValue ecn_value = 4;
    TunnelFieldValue dscp_value = 5;
    TunnelFieldValue ttl_value = 6;

    oneof encap_or_decap {
      EncapProperties encap = 10;
      DecapProperties decap = 11;
    }
  }

  // The Stratum p4c backend includes P4InternalActionLink and P4ActionRedirect
  // messages in action descriptors when it merges actions from multiple logical
  // tables into one combined action for a physical table.  They add references
  // from the original P4 action to the replacement internal action.
  //
  // The P4ActionRedirect message is part of actions that indirectly apply
  // another table by setting a local metadata field, which then becomes
  // the match key to another logical table in the "HIDDEN" pipeline stage.
  // It is also part of actions where the p4c backend chooses to merge some of
  // the outer control logic into the action itself.
  //  key_field_name - indicates the name of the local metadata field that keys
  //      the hidden table.
  //  key_value - indicates key_field_name's value that this action uses for
  //      hidden table lookup.
  //  internal_links - link the action descriptor for the original P4 program
  //      action to the compiler-generated internal action.
  //  input_redirects - record actions that merge to form a single internal
  //      action; useful for debugging purposes.
  //
  // The P4InternalActionLink provides references from an original action
  // descriptor to any internal actions that replace it:
  //  internal_action_name - indicates the name of the internal action that
  //      replaces the original action.
  //  applied_tables - constrains the internal action replacement to certain
  //      tables. The compiler generally merges control logic into an action
  //      only when a specific table is hit, so the indirect action replacement
  //      may be harmful to other tables that share the same action.
  //      TODO(teverman): There are some P4Runtime agent issues with this
  //      scheme and action profiles that need to be worked out.
  //  hidden_table_name - identifies the hidden table whose action was merged
  //      to form the action represented by internal_action_name.
  //
  // The presence of this example P4ActionRedirect in an action descriptor
  // means that p4c has consolidated actions from three different hidden tables
  // to form a single internal action.  The first two input actions cover the
  // case where the action assigns the constant 2 to "local_metadata.encap_type"
  // for subsequent use as a match key for the two named hidden encap tables.
  // The third input action comes from the hidden "l2_rewrite_table".
  //  action_redirects {
  //    internal_links {
  //      internal_action_name: "__ingress.l3_fwd.encap_gre_ipv6_...copy_mac"
  //    }
  //    input_redirects {
  //      key_field_name: "local_metadata.encap_type"
  //      key_value: 2
  //      internal_links {
  //        hidden_table_name: "egress.encap.encap_ipv4_base_table"
  //      }
  //      internal_links {
  //        hidden_table_name: "egress.encap.encap_ipv6_base_table"
  //      }
  //    }
  //    input_redirects {
  //      key_field_name: "local_metadata.l3_unicast"
  //      key_value: 1
  //      internal_links {
  //        hidden_table_name: "egress.l2_rewrite.l2_rewrite_table"
  //      }
  //    }
  //  }



  //    action_redirects {
  //      key_field_name: "local_metadata.encap_type"
  //      key_value: 2
  //      internal_links {
  //        internal_action_name: "__ingress.l3_fwd.encap_gre_ipv6_and..."
  //        hidden_table_name: "egress.encap.encap_ipv4_base_table"
  //      }
  //      internal_links {
  //        internal_action_name: "__ingress.l3_fwd.encap_gre_ipv6_and..."
  //        hidden_table_name: "egress.encap.encap_ipv6_base_table"
  //      }
  //    }
  message P4ActionRedirect {
    string key_field_name = 1;
    int64 key_value = 2;
    repeated P4InternalActionLink internal_links = 3;
    repeated P4ActionRedirect input_redirects = 100;
  }

  // TODO(teverman): This message probably needs an additional P4 header type
  // qualifier to differentiate which one of multiple internal action links to
  // use when the P4 program applies tables conditionally based on valid header
  // type.
  message P4InternalActionLink {
    string internal_action_name = 1;
    repeated string applied_tables = 2;
    string hidden_table_name = 3;
  }

  // Mapping fields in an action descriptor are:
  //  type - always P4_ACTION_TYPE_FUNCTION in the current implementation.
  //  assignments - instructions for how to assign action parameters, constants,
  //      and other fields to a destination header or metadata field.
  //  primitive_ops - lists any primitive operations that the action performs
  //      without parameters.
  //  color_actions - lists actions which occur based on packet metering
  //      conditions.
  //  device_data - Optional data for the HAL switch to use for defining and
  //      setting up the action.
  //  tunnel_actions - lists any potential tunnel header operations that the
  //      action performs.  This repeated field provides a scratch area for
  //      the p4c backend to accumulate tunneling attributes as it processes
  //      the P4 program.  The backend clears the tunnel_actions and replaces
  //      them with the simpler tunnel_properties field below before writing
  //      the final P4PipelineConfig output.
  //  action_redirects - lists any redirections this action does to incorporate
  //      actions from HIDDEN tables or other internally generated actions.
  //      Upon adding a field to action_redirects, the Stratum p4c backend
  //      removes the field's original assignments entry.  Thus, the same field
  //      should never appear in both the assignments and the action_redirects
  //      lists.
  //  tunnel_properties - specifies any encap or decap operations performed by
  //      this action to tunnel packets.  It is empty in actions that do not
  //      tunnel.
  P4ActionType type = 1;
  repeated P4ActionInstructions assignments = 2;
  repeated P4ActionOp primitive_ops = 3;
  repeated P4MeterColorAction color_actions = 4;
  repeated P4DeviceProgramData device_data = 5;
  repeated P4TunnelAction tunnel_actions = 6;
  repeated P4ActionRedirect action_redirects = 7;
  P4TunnelProperties tunnel_properties = 8;
  P4ActionDescriptor conditional_assignments = 9;
}

// A P4HeaderDescriptor maps a named P4 header to an integer type value.  It
// is useful for encap/decap actions.  Given the P4 program statement:
//  hdr.inner.ipv4.setInvalid();
// a P4HeaderDescriptor for "hdr.inner.ipv4" with type P4_HEADER_IPV4 helps
// determine that the packet's IPv4 header needs to be popped.
message P4HeaderDescriptor {
  // Mapping fields in a header descriptor are:
  //  type - Identifies the type of header.
  //  depth - Provides an indication of a header's depth in an encap/decap
  //      tunnel or a header stack.  For headers in an encap tunnel, the p4c
  //      backend reports depth relative to other headers of the same type.
  //      A non-zero depth indicates an inner header, and a depth of zero
  //      indicates an outer header.  The p4c backend is unable to determine
  //      a specific depth with multiple layers of encap.  For example, for
  //      an IPv4 header wrapped inside a GRE header within an outer IPv4
  //      header, the inner IPv4 header has a depth of 1, the outer IPv4 header
  //      has a depth of 0, and the GRE header also has a depth of 0.  For
  //      header stacks, the actual depth of the header within a stack could
  //      be reported, but the p4c backend does not currently populate header
  //      stack depth in the P4HeaderDescriptor.
  P4HeaderType type = 1;
  int32 depth = 2;
}

// This message defines one table map entry in the P4PipelineConfig.  The
// Stratum p4c backend generates the table map for the switch stack as the
// P4 program compiles.  This map can vary from vendor to vendor, and it can
// conceivably also vary from chip to chip for the same vendor.
message P4TableMapValue {
  oneof descriptor {
    P4TableDescriptor table_descriptor = 1;
    P4FieldDescriptor field_descriptor = 2;
    P4ActionDescriptor action_descriptor = 3;
    P4HeaderDescriptor header_descriptor = 4;
    P4ActionDescriptor internal_action = 5;
  }
}
