// Copyright 2019 Google LLC
// SPDX-License-Identifier: Apache-2.0

// The sliced field map provides a source of additional P4 field type mapping
// data.  It applies to fields where the P4 program uses a slice expression
// to split a known field type into smaller fields.  In this example:
//
//  local_metadata.ipv6_base_dst_addr_upper = hdr.ipv6_base.dst_addr[127:64];
//
// The compiler determines that the left-hand side is a slice of field type
// P4_FIELD_TYPE_IPV6_DST, and then the compiler looks at the sliced field
// map to determine a more specific type, which is P4_FIELD_TYPE_IPV6_DST_UPPER
// in this example.

syntax = "proto3";

option cc_generic_services = false;

package stratum.p4c_backends;

import "stratum/public/proto/p4_table_defs.proto";

// Each SliceProperties message characterizes one possible valid slice of
// a known unsliced field.
//  slice_bit_offset - gives the bit offset of a slice from the beginning of
//      the unsliced header field.
//  slice_bit_width -  gives the bit width of the slice.
//  sliced_field_type - specifies a new field type for a slice that matches
//      the slice_bit_offset and slice_bit_width.
// The SliceProperties for splitting an IPv6 destination address into two
// 64-bit slices could look something like this example:
//  slice_properties {  # Assigns P4_FIELD_TYPE_IPV6_DST_UPPER to first 64 bits.
//    slice bit_offset: 0
//    slice_bit_width: 64
//    sliced_field_type: P4_FIELD_TYPE_IPV6_DST_UPPER
//  }
//  slice_properties {  # Assigns P4_FIELD_TYPE_IPV6_DST_LOWER to lower 64 bits.
//    slice bit_offset: 64
//    slice_bit_width: 64
//    sliced_field_type: P4_FIELD_TYPE_IPV6_DST_LOWER
//  }
message SliceProperties {
  uint32 slice_bit_offset = 1;
  uint32 slice_bit_width = 2;
  P4FieldType sliced_field_type = 3;
}

// The SliceMapValue contains all possible SliceProperties for a given header
// type.  The SliceMapValue for the P4_FIELD_TYPE_IPV6_DST example in the
// SliceProperties comments above contains two slice_properties entries,
// one for the upper slice and one for the lower slice.
message SliceMapValue {
  repeated SliceProperties slice_properties = 1;
}

// The SlicedFieldMap contains one entry for every header field that the p4c
// backend needs to compile into slices.  The key is the name of the unsliced
// field type, such as "P4_FIELD_TYPE_IPV6_DST".  The value enumerates the
// recognized slices of the key's field type.  The key is a string because
// protocol buffer maps don't allow enums as keys, so a map lookup requires
// a key computation by calling P4FieldType_Name(<enum-value>).
message SlicedFieldMap {
  map<string, SliceMapValue> sliced_field_map = 1;
}
