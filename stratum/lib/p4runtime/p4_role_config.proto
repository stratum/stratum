// Copyright 2022-present Open Networking Foundation
// Copyright 2022 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// TODO(max)
// The P4RoleConfig contains ...

syntax = "proto3";

option cc_generic_services = false;

package stratum;

import "p4/v1/p4runtime.proto";


// The P4RoleConfig message conists of these fields:
//  accessible_p4_ids - a list of the
//  packet_in_filters -
//  receives_packet_ins -
message P4RoleConfig {
  repeated uint32 accessible_p4_ids = 1;
  repeated p4.v1.PacketMetadata packet_in_filters = 2;
  bool receives_packet_ins = 3;
  // Do we need to guard pipeline pushes?
  // bool can_push_pipeline = 4;
}

// The P4PipelineConfig message conists of these fields:
//  table_map - contains a map from P4 object name to descriptor data that
//      supports mapping between P4 runtime requests, P4Info, and internal
//      HAL flow entries.
//  p4_controls - present the control methods from the P4 program in a form
//      that the HAL switch can use for logical-to-physical table translation.
//  idle_pipeline_stages - identify any forwarding pipeline stages that are
//      not needed by tables in the P4 program.
//  static_table_entries - contains a WriteRequest.updates() entry for each
//      "const entry" table property in the P4 program.
// message P4PipelineConfig {
//   map<string, P4TableMapValue> table_map = 1;
//   repeated P4Control p4_controls = 2;
//   repeated P4Annotation.PipelineStage idle_pipeline_stages = 3;
//   p4.v1.WriteRequest static_table_entries = 4;
// }
