// Copyright 2018 Google LLC
// Copyright 2018-present Open Networking Foundation
// SPDX-License-Identifier: Apache-2.0


// oc is generated by openconfig/lib/go/structs/codegen/commongen.go
// as a protobuf representation of a YANG schema.
//
// Schema compression enabled: false
// Input schema modules:
//  - stratum-bcm-chip.yang
//  - stratum-chassis.yang
//  - stratum-extensions.yang
//  - stratum-interface-flow-params.yang
//  - stratum-interface.yang
//  - stratum-linecard.yang
//  - stratum-node-flow-params.yang
//  - stratum-node.yang
//  - stratum-platform.yang
//  - stratum-port.yang
// Include paths:
//   - ...
syntax = "proto3";

package oc.Bcm;

import "github.com/openconfig/ygot/proto/ywrapper/ywrapper.proto";

// Components.Component.Chassis represents the
// /openconfig-platform/components/component/chassis YANG schema element.
message Chassis {
  // Components.Component.Chassis.Config represents the
  // /openconfig-platform/components/component/chassis/config YANG schema
  // element.
  message Config {
    // Components.Component.Chassis.Conf.ConfigParams represents the
    // /openconfig-platform/components/component/chassis/conf/config-params
    // YANG schema element.
    message ConfigParams {
    }

    // Components.Component.Chassis.Conf.NodeIdToRateLimitConfig represents
    // the
    // /openconfig-platform/components/component/chassis/conf/node_id_to_rate_limit_config
    // YANG schema element.
    message NodeIdToRateLimitConfig {
      // Components.Component.Chassis.Conf.NodeIdToRateLimitConfig.PerCosRateLimitConfigs
      // represents the
      // /openconfig-platform/components/component/chassis/conf/node_id_to_rate_limit_config/per_cos_rate_limit_configs
      // YANG schema element.
      message PerCosRateLimitConfigs {
        ywrapper.IntValue id = 1;  //[(yext.path) = "id"];
        ywrapper.IntValue max_rate_pps =
            2;  //[(yext.path) = "max_rate_pps"];
        ywrapper.IntValue max_burst_pkts =
            3;  //[(yext.path) = "max_burst_pkts"];
      }

      ywrapper.IntValue max_burst_pkts =
          1;  //[(yext.path) = "max_burst_pkts"];
      map<int32, PerCosRateLimitConfigs> per_cos_rate_limit_configs =
          2;  //[(yext.path) = "per_cos_rate_limit_configs"];
      ywrapper.UintValue node_uid = 3;     //[(yext.path) = "node_uid"];
      ywrapper.IntValue max_rate_pps = 4;  //[(yext.path) = "max_rate_pps"];
    }

    // Components.Component.Chassis.Conf.NodeIdToRxConfig represents the
    // /openconfig-platform/components/component/chassis/conf/node_id_to_rx_config
    // YANG schema element.
    message NodeIdToRxConfig {
      // Components.Component.Chassis.Conf.NodeIdToRxConfig.DmaChannelConfigs
      // represents the
      // /openconfig-platform/components/component/chassis/conf/node_id_to_rx_config/dma_channel_configs
      // YANG schema element.
      message DmaChannelConfigs {
        ywrapper.BoolValue strip_vlan = 1;  //[(yext.path) = "strip_vlan"];
        ywrapper.BoolValue oversized_packets_ok =
            2;  //[(yext.path) = "oversized_packets_ok"];
        ywrapper.BoolValue no_pkt_parsing =
            3;  //[(yext.path) = "no_pkt_parsing"];
        repeated ywrapper.IntValue cos_set = 4;  //[(yext.path) = "cos_set"];
        ywrapper.IntValue id = 5;                //[(yext.path) = "id"];
        ywrapper.IntValue chains = 6;            //[(yext.path) = "chains"];
        ywrapper.BoolValue strip_crc = 7;  //[(yext.path) = "strip_crc"];
      }

      ywrapper.IntValue max_burst_pkts =
          1;  //[(yext.path) = "max_burst_pkts"];
      ywrapper.IntValue rx_pool_bytes_per_pkt =
          2;  //[(yext.path) = "rx_pool_bytes_per_pkt"];
      ywrapper.IntValue max_pkt_size_bytes =
          3;  //[(yext.path) = "max_pkt_size_bytes"];
      ywrapper.IntValue pkts_per_chain =
          4;  //[(yext.path) = "pkts_per_chain"];
      ywrapper.IntValue max_rate_pps = 5;  //[(yext.path) = "max_rate_pps"];
      ywrapper.UintValue node_uid = 6;     //[(yext.path) = "node_uid"];
      ywrapper.IntValue rx_pool_pkt_count =
          7;  //[(yext.path) = "rx_pool_pkt_count"];
      ywrapper.BoolValue use_interrupt = 8;  //[(yext.path) = "use_interrupt"];
      map<int32, DmaChannelConfigs> dma_channel_configs =
          9;  //[(yext.path) = "dma_channel_configs"];
    }

    // Components.Component.Chassis.Conf.NodeIdToTxConfig represents the
    // /openconfig-platform/components/component/chassis/conf/node_id_to_tx_config
    // YANG schema element.
    message NodeIdToTxConfig {
      ywrapper.UintValue node_uid = 1;  //[(yext.path) = "node_uid"];
    }

    // Components.Component.Chassis.Conf.NodeIdToKnetConfig represents the
    // /openconfig-platform/components/component/chassis/conf/node_id_to_knet_config
    // YANG schema element.
    message NodeIdToKnetConfig {
      // Components.Component.Chassis.Conf.NodeIdToKnetConfig.KnetIntfConfigs
      // represents the
      // /openconfig-platform/components/component/chassis/conf/node_id_to_knet_config/knet_intf_configs
      // YANG schema element.
      message KnetIntfConfigs {
        ywrapper.IntValue vlan = 1;  //[(yext.path) = "vlan"];
        StratumBcmChip.BcmKnetIfPurpose purpose =
            2;                               //[(yext.path) = "purpose"];
        ywrapper.IntValue id = 3;         //[(yext.path) = "id"];
        ywrapper.IntValue mtu = 4;        //[(yext.path) = "mtu"];
        ywrapper.IntValue cpu_queue = 5;  //[(yext.path) = "cpu_queue"];
      }

      map<int32, KnetIntfConfigs> knet_intf_configs =
          1;  //[(yext.path) = "knet_intf_configs"];
      ywrapper.UintValue node_uid = 2;  //[(yext.path) = "node_uid"];
    }

    map<uint64, NodeIdToTxConfig> node_id_to_tx_config =
        1;  //[(yext.path) = "node_id_to_tx_config"];
    map<uint64, NodeIdToRateLimitConfig> node_id_to_rate_limit_config =
        2;  //[(yext.path) = "node_id_to_rate_limit_config"];
    ywrapper.StringValue bcm_chassis_map_id =
        3;  //[(yext.path) = "bcm_chassis_map_id"];
    map<uint64, NodeIdToKnetConfig> node_id_to_knet_config =
        4;  //[(yext.path) = "node_id_to_knet_config"];
    map<uint64, NodeIdToRxConfig> node_id_to_rx_config =
        5;  //[(yext.path) = "node_id_to_rx_config"];
    // Unused
    // StratumChassis.Platform platform = 6;  //[(yext.path) = "platform"];
    ConfigParams config_params = 7;         //[(yext.path) = "config-params"];
    reserved 6;
  }

  // Components.Component.Chassis.State represents the
  // /openconfig-platform/components/component/chassis/state YANG schema
  // element.
  message State {
    // Components.Component.Chassis.State.ConfigParams represents the
    // /openconfig-platform/components/component/chassis/state/config-params
    // YANG schema element.
    message ConfigParams {
    }

    // Components.Component.Chassis.State.NodeIdToKnetConfig represents the
    // /openconfig-platform/components/component/chassis/state/node_id_to_knet_config
    // YANG schema element.
    message NodeIdToKnetConfig {
      // Components.Component.Chassis.State.NodeIdToKnetConfig.KnetIntfConfigs
      // represents the
      // /openconfig-platform/components/component/chassis/state/node_id_to_knet_config/knet_intf_configs
      // YANG schema element.
      message KnetIntfConfigs {
        ywrapper.IntValue mtu = 1;        //[(yext.path) = "mtu"];
        ywrapper.IntValue cpu_queue = 2;  //[(yext.path) = "cpu_queue"];
        ywrapper.IntValue vlan = 3;       //[(yext.path) = "vlan"];
        StratumBcmChip.BcmKnetIfPurpose purpose =
            4;                        //[(yext.path) = "purpose"];
        ywrapper.IntValue id = 5;  //[(yext.path) = "id"];
      }

      map<int32, KnetIntfConfigs> knet_intf_configs =
          1;  //[(yext.path) = "knet_intf_configs"];
      ywrapper.UintValue node_uid = 2;  //[(yext.path) = "node_uid"];
    }

    // Components.Component.Chassis.State.NodeIdToRateLimitConfig represents
    // the
    // /openconfig-platform/components/component/chassis/state/node_id_to_rate_limit_config
    // YANG schema element.
    message NodeIdToRateLimitConfig {
      // Components.Component.Chassis.State.NodeIdToRateLimitConfig.PerCosRateLimitConfigs
      // represents the
      // /openconfig-platform/components/component/chassis/state/node_id_to_rate_limit_config/per_cos_rate_limit_configs
      // YANG schema element.
      message PerCosRateLimitConfigs {
        ywrapper.IntValue id = 1;  //[(yext.path) = "id"];
        ywrapper.IntValue max_rate_pps =
            2;  //[(yext.path) = "max_rate_pps"];
        ywrapper.IntValue max_burst_pkts =
            3;  //[(yext.path) = "max_burst_pkts"];
      }

      ywrapper.IntValue max_rate_pps = 1;  //[(yext.path) = "max_rate_pps"];
      ywrapper.IntValue max_burst_pkts =
          2;  //[(yext.path) = "max_burst_pkts"];
      map<uint64, PerCosRateLimitConfigs> per_cos_rate_limit_configs =
          3;  //[(yext.path) = "per_cos_rate_limit_configs"];
      ywrapper.UintValue node_uid = 4;  //[(yext.path) = "node_uid"];
    }

    // Components.Component.Chassis.State.NodeIdToTxConfig represents the
    // /openconfig-platform/components/component/chassis/state/node_id_to_tx_config
    // YANG schema element.
    message NodeIdToTxConfig {
      ywrapper.UintValue node_uid = 1;  //[(yext.path) = "node_uid"];
    }

    // Components.Component.Chassis.State.NodeIdToRxConfig represents the
    // /openconfig-platform/components/component/chassis/state/node_id_to_rx_config
    // YANG schema element.
    message NodeIdToRxConfig {
      // Components.Component.Chassis.State.NodeIdToRxConfig.DmaChannelConfigs
      // represents the
      // /openconfig-platform/components/component/chassis/state/node_id_to_rx_config/dma_channel_configs
      // YANG schema element.
      message DmaChannelConfigs {
        ywrapper.IntValue chains = 1;     //[(yext.path) = "chains"];
        ywrapper.BoolValue stript_crc = 2;  //[(yext.path) = "stript_crc"];
        ywrapper.BoolValue strip_vlan = 3;  //[(yext.path) = "strip_vlan"];
        ywrapper.BoolValue oversized_packets_ok =
            4;  //[(yext.path) = "oversized_packets_ok"];
        ywrapper.BoolValue no_pkt_parsing =
            5;  //[(yext.path) = "no_pkt_parsing"];
        repeated ywrapper.IntValue cos_set = 6;  //[(yext.path) = "cos_set"];
        ywrapper.IntValue id = 7;                //[(yext.path) = "id"];
      }

      ywrapper.BoolValue use_interrupt = 1;  //[(yext.path) = "use_interrupt"];
      ywrapper.IntValue rx_pool_bytes_per_pkt =
          2;  //[(yext.path) = "rx_pool_bytes_per_pkt"];
      map<int32, DmaChannelConfigs> dma_channel_configs =
          3;  //[(yext.path) = "dma_channel_configs"];
      ywrapper.IntValue pkts_per_chain =
          4;  //[(yext.path) = "pkts_per_chain"];
      ywrapper.IntValue max_pkt_size_bytes =
          5;  //[(yext.path) = "max_pkt_size_bytes"];
      ywrapper.UintValue node_uid = 6;  //[(yext.path) = "node_uid"];
      ywrapper.IntValue rx_pool_pkt_count =
          7;  //[(yext.path) = "rx_pool_pkt_count"];
      ywrapper.IntValue max_burst_pkts =
          8;  //[(yext.path) = "max_burst_pkts"];
      ywrapper.IntValue max_rate_pps = 9;  //[(yext.path) = "max_rate_pps"];
    }

    map<uint64, NodeIdToRxConfig> node_id_to_rx_config =
        1;  //[(yext.path) = "node_id_to_rx_config"];
    map<uint64, NodeIdToTxConfig> node_id_to_tx_config =
        2;  //[(yext.path) = "node_id_to_tx_config"];
    map<uint64, NodeIdToRateLimitConfig> node_id_to_rate_limit_config =
        3;  //[(yext.path) = "node_id_to_rate_limit_config"];
    // Unused
    // StratumChassis.Platform platform = 4;  //[(yext.path) = "platform"];
    ConfigParams config_params = 5;         //[(yext.path) = "config-params"];
    ywrapper.StringValue bcm_chassis_map_id =
        6;  //[(yext.path) = "bcm_chassis_map_id"];
    map<uint64, NodeIdToKnetConfig> node_id_to_knet_config =
        7;                           //[(yext.path) = "node_id_to_knet_config"];
    reserved 4;
  }

  Config config = 1;  //[(yext.path) = "config"];
  State state = 2;    //[(yext.path) = "state"];
}

// StratumBcmChip_BCM_KNET_IF_PURPOSE represents the corresponding enumerated
// node in the YANG schema.
message StratumBcmChip {
  enum BcmKnetIfPurpose {
    UNSET = 0;
    BCM_KNET_IF_PURPOSE_CONTROLLER = 1;
    BCM_KNET_IF_PURPOSE_SFLOW = 2;
    BCM_KNET_IF_PURPOSE_UNKNOWN = 3;
  }
}
