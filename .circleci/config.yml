# Copyright 2018-present Open Networking Foundation
# SPDX-License-Identifier: Apache-2.0

version: 2.1

# Cache Bazel output root (see bazelrc) to speed up job execution time.
# The idea is to use the last cache available for the same branch, or the one
# from master if this is the first build for this branch.
# TODO: consider using Bazel remote cache (e.g. local HTTP proxy cache backed by S3)
restore_bazel_cache: &restore_bazel_cache
  restore_cache:
    keys:
      - v3-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
      - v3-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
      - v3-bazel-cache-{{ .Environment.CIRCLE_JOB }}-master
save_bazel_cache: &save_bazel_cache
  save_cache:
    # Always saving the cache, even in case of failures, helps with completing
    # jobs where the bazel process was killed because it took too long or OOM.
    # Restart the job if you see the bazel server being terminated abruptly.
    when: always
    key: v3-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - /tmp/bazel-cache
      - /tmp/bazel-disk-cache

clean_bazel_cache: &clean_bazel_cache
  run:
    name: Clean Bazel disk cache of files that have not been touched in 30 days
    command: /usr/bin/find /tmp/bazel-disk-cache -atime +30 -exec rm -v {} \;

# Print Bazel profiling info and generate JSON report to upload as artifact.
analyze_bazel_profile: &analyze_bazel_profile
  run:
    name: Analyze Bazel profile
    command: |
      bazel analyze-profile /tmp/bazel.profile.json

store_bazel_profile: &store_bazel_profile
  store_artifacts:
    path: /tmp/bazel.profile.json

# Use a bazelrc file convenient for CI jobs.
set_bazelrc: &set_bazelrc
  run:
    name: Set bazelrc
    command: cat .circleci/bazelrc >> .bazelrc

# Convenience anchors to update published Docker images. Images are first pulled
# to allow for layer cache hits and reduce build times.
docker_login: &docker_login
  run:
    name: Docker login
    command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
docker_build: &docker_build
  run:
    name: Build Docker image
    command: |
      docker pull $DOCKER_IMG || true
      cd $DOCKER_SCOPE
      docker build -f $DOCKER_FILE -t $DOCKER_IMG --cache-from $DOCKER_IMG --label vcs-ref=$CIRCLE_SHA1 .
docker_push: &docker_push
  run:
    name: Push Docker image
    command: docker push $DOCKER_IMG

jobs:

  # Build targets and run unit tests.
  unit_tests:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Build Stratum targets
          command: xargs -a .circleci/build-targets.txt bazel build
      - *analyze_bazel_profile
      - *store_bazel_profile
      - run:
          name: Test Stratum targets
          command: xargs -a .circleci/test-targets.txt bazel test
      - *clean_bazel_cache
      - *save_bazel_cache

  # CDLang
  cdlang_tests:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Build CDLang targets
          command: xargs -a .circleci/cdlang-targets.txt bazel build
      - *analyze_bazel_profile
      - *store_bazel_profile
      - run:
          name: Test CDLang targets
          command: xargs -a .circleci/cdlang-targets.txt bazel test
      - *clean_bazel_cache
      - *save_bazel_cache

  # Generate coverage report and upload to codecov.io.
  coverage:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Run test and collect coverage data
          command: xargs -a .circleci/test-targets.txt bazel coverage
      - *analyze_bazel_profile
      - *store_bazel_profile
      - run:
          name: Upload coverage report
          command: bash <(curl -s https://codecov.io/bash) -f bazel-out/_coverage/_coverage_report.dat -X s3 -C $CIRCLE_SHA1
      - *clean_bazel_cache
      - *save_bazel_cache

  # Update images on Docker Hub
  publish-docker-build:
    machine: true
    environment:
      - DOCKER_SCOPE: .
      - DOCKER_FILE: Dockerfile.build
      - DOCKER_IMG: stratumproject/build:build
    steps:
      - checkout
      - *docker_login
      - *docker_build
      - *docker_push

  publish-docker-mininet:
    machine: true
    environment:
      - DOCKER_SCOPE: .
      - DOCKER_FILE: tools/mininet/Dockerfile
      - DOCKER_IMG: opennetworking/mn-stratum
    steps:
      - checkout
      - *docker_login
      - *set_bazelrc
      - *docker_build
      - run:
          name: Test Mininet Docker image
          # Test that all shared objects are present
          command: |
            docker run --entrypoint stratum_bmv2 $DOCKER_IMG -version
            docker run --entrypoint mn $DOCKER_IMG --version
            docker run --rm --entrypoint python $DOCKER_IMG -c "from p4.config.v1 import p4info_pb2;from google.rpc import status_pb2, code_pb2;from p4.v1 import p4runtime_pb2, p4runtime_pb2_grpc"
      - *docker_push

  publish-docker-p4c-fpm:
    docker:
      - image: stratumproject/build:build
    environment:
      - DOCKER_SCOPE: stratum/p4c_backends/fpm
      - DOCKER_FILE: Dockerfile
      - DOCKER_IMG: stratumproject/p4c-fpm
    steps:
      - setup_remote_docker
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Build p4c-fpm
          command: |
            bazel build //stratum/p4c_backends/fpm:p4c_fpm_deb
            cp bazel-bin/stratum/p4c_backends/fpm/p4c_fpm_deb.deb $DOCKER_SCOPE
      - *docker_login
      - *docker_build
      - run:
          name: Test p4c-fpm Docker image
          command: |
            docker run $DOCKER_IMG -version
      - *docker_push
      - *clean_bazel_cache
      - *save_bazel_cache

  publish-docker-stratum-bcm-sdklt:
    docker:
      - image: stratumproject/build:build
    environment:
      - DOCKER_SCOPE: stratum/hal/bin/bcm/standalone/docker
      - DOCKER_FILE: Dockerfile
      - DOCKER_IMG: stratumproject/stratum-bcm:sdklt
      - CC: clang
      - CXX: clang++
    steps:
      - setup_remote_docker
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Build stratum_bcm
          command: |
            bazel build //stratum/hal/bin/bcm/standalone:stratum_bcm_sdklt_deb
            cp bazel-bin/stratum/hal/bin/bcm/standalone/stratum_bcm_sdklt_deb.deb $DOCKER_SCOPE/stratum_bcm_deb.deb
      - *docker_login
      - *docker_build
      - *docker_push
      - *clean_bazel_cache
      - *save_bazel_cache

  publish-docker-stratum-bcm-opennsa:
    docker:
      - image: stratumproject/build:build
    environment:
      - DOCKER_SCOPE: stratum/hal/bin/bcm/standalone/docker
      - DOCKER_FILE: Dockerfile
      - DOCKER_IMG: stratumproject/stratum-bcm:opennsa
      - CC: clang
      - CXX: clang++
    steps:
      - setup_remote_docker
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Build stratum_bcm
          command: |
            bazel build //stratum/hal/bin/bcm/standalone:stratum_bcm_opennsa_deb
            cp bazel-bin/stratum/hal/bin/bcm/standalone/stratum_bcm_opennsa_deb.deb $DOCKER_SCOPE/stratum_bcm_deb.deb
      - *docker_login
      - *docker_build
      - *docker_push
      - *save_bazel_cache

  cpp-style-check:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - run:
          name: Run cpplint
          command: cpplint --recursive --exclude=stratum/hal/lib/bcm/sdklt/bcm_sdk_wrapper.cc stratum

  license-check:
    docker:
      - image: fsfe/reuse:latest
    steps:
      - checkout
      - run:
          name: Run reuse
          command: reuse lint
  bazel-style-check:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - run:
          name: Run buildifier
          command: buildifier --lint=warn -r ./ || true

workflows:
  version: 2
  build_and_test:
    jobs:
      - unit_tests
      - cdlang_tests
      - coverage
      - cpp-style-check
      - license-check
      - bazel-style-check
  docker-publish:
    jobs:
      - publish-docker-build:
          filters:
            branches:
              only: master
      - publish-docker-mininet:
          requires:
            - publish-docker-build
      - publish-docker-p4c-fpm:
          requires:
            - publish-docker-build
      - publish-docker-stratum-bcm-sdklt:
          requires:
            - publish-docker-build
      - publish-docker-stratum-bcm-opennsa:
          requires:
            - publish-docker-build
