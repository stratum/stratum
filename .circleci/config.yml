#
# Copyright 2018 Stratum Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version: 2.1

# Cache Bazel output root (see bazelrc) to speed up job execution time.
# The idea is to use the last cache available for the same branch, or the one
# from master if this is the first build for this branch.
# TODO: consider using Bazel remote cache (e.g. local HTTP proxy cache backed by S3)
restore_bazel_cache: &restore_bazel_cache
  restore_cache:
    keys:
      - v2-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
      - v2-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
      - v2-bazel-cache-{{ .Environment.CIRCLE_JOB }}-master
save_bazel_cache: &save_bazel_cache
  save_cache:
    # Always saving the cache, even in case of failures, helps with completing
    # jobs where the bazel process was killed because it took too long or OOM.
    # Restart the job if you see the bazel server being terminated abruptly.
    when: always
    key: v2-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - /tmp/bazel-cache

# Print Bazel profiling info and generate HTML report to upload as artifact.
analyze_bazel_profile: &analyze_bazel_profile
  run:
    name: Analyze Bazel profile
    command: |
      bazel analyze-profile /tmp/bazel.profile
      mkdir /tmp/bazel_profile
      bazel analyze-profile --html /tmp/bazel.profile
      mv /tmp/bazel.profile.html /tmp/bazel_profile/profile.html
store_bazel_profile: &store_bazel_profile
  store_artifacts:
    path: /tmp/bazel_profile

# Use a bazelrc file convenient for CI jobs.
set_bazelrc: &set_bazelrc
  run:
    name: Set bazelrc
    command: cat .circleci/bazelrc >> .bazelrc

# Convenience anchors to update published Docker images. Images are first pulled
# to allow for layer cache hits and reduce build times.
docker_login: &docker_login
  run:
    name: Docker login
    command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
docker_build: &docker_build
  run:
    name: Build Docker image
    command: |
      docker pull $DOCKER_IMG || true
      cd $DOCKER_SCOPE
      docker build -f $DOCKER_FILE -t $DOCKER_IMG --cache-from $DOCKER_IMG .
docker_push: &docker_push
  run:
    name: Push Docker image
    command: docker push $DOCKER_IMG

jobs:

  # Build targets and run unit tests.
  unit_tests:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Build Stratum targets
          command: xargs -a .circleci/build-targets.txt bazel build
      - *analyze_bazel_profile
      - *store_bazel_profile
      - run:
          name: Test Stratum targets
          command: xargs -a .circleci/test-targets.txt bazel test
      - *save_bazel_cache

  # Generate coverage report and upload to codecov.io.
  coverage:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - *restore_bazel_cache
      - *set_bazelrc
      - run:
          name: Run test and collect coverage data
          command: xargs -a .circleci/test-targets.txt bazel coverage
      - *analyze_bazel_profile
      - *store_bazel_profile
      - run:
          name: Upload coverage report
          command: bash <(curl -s https://codecov.io/bash) -f bazel-out/_coverage/_coverage_report.dat -X s3 -C $CIRCLE_SHA1
      - *save_bazel_cache

  # Update images on Docker Hub
  publish-docker-build:
    machine: true
    environment:
      - DOCKER_SCOPE: .
      - DOCKER_FILE: Dockerfile.build
      - DOCKER_IMG: stratumproject/build:build
    steps:
      - checkout
      - *docker_login
      - *docker_build
      - *docker_push

  publish-docker-mininet:
    machine: true
    environment:
      - DOCKER_SCOPE: .
      - DOCKER_FILE: tools/mininet/Dockerfile
      - DOCKER_IMG: opennetworking/mn-stratum
    steps:
      - checkout
      - *docker_login
      - *set_bazelrc
      - *docker_build
      - run:
          name: Test Mininet Docker image
          # Test that all shared objects are present
          command: |
            docker run --entrypoint stratum_bmv2 $DOCKER_IMG -version
            docker run --entrypoint mn $DOCKER_IMG --version
      - *docker_push

  publish-docker-p4c-fpm:
    machine: true
    environment:
      - DOCKER_SCOPE: .
      - DOCKER_FILE: stratum/p4c_backends/fpm/Dockerfile
      - DOCKER_IMG: stratumproject/p4c-fpm
    steps:
      - checkout
      - *docker_login
      - *set_bazelrc
      - *docker_build
      - run:
          name: Test p4c-fpm Docker image
          command: |
            docker run $DOCKER_IMG -version
      - *docker_push

  cpp-style-check:
    docker:
      - image: stratumproject/build:build
    steps:
      - checkout
      - run:
          name: Run cpplint
          command: cpplint --recursive --exclude=stratum/hal/lib/bcm/bcm_sdk_wrapper.cc stratum

workflows:
  version: 2
  build_and_test:
    jobs:
      - unit_tests
      - coverage
      - cpp-style-check
  docker-publish:
    jobs:
      - publish-docker-build:
          filters:
            branches:
              only: master
      - publish-docker-mininet:
          requires:
            - publish-docker-build
      - publish-docker-p4c-fpm:
          requires:
            - publish-docker-build
