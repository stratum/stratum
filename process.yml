# Orb 'circleci/aws-s3@3.0.0' resolved to 'circleci/aws-s3@3.0.0'
# Orb 'codecov/codecov@3.2.2' resolved to 'codecov/codecov@3.2.2'
version: 2
jobs:
  coverage:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    resource_class: large
    environment:
    - CC: clang
    - CXX: clang++
    steps:
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Run test and collect coverage data
        command: xargs -a .circleci/test-targets.txt bazel coverage --config=ci-large
    - run:
        name: Analyze Bazel profile
        command: |
          bazel analyze-profile /tmp/bazel.profile.json
    - store_artifacts:
        path: /tmp/bazel.profile.json
    - run:
        command: |
          family=$(uname -s | tr '[:upper:]' '[:lower:]')
          os="windows"
          [[ $family == "darwin" ]] && os="macos"

          [[ $family == "linux" ]] && os="linux"
          [[ $os == "linux" ]] && osID=$(grep -e "^ID=" /etc/os-release | cut -c4-)
          [[ $osID == "alpine" ]] && os="alpine"
          echo "Detected ${os}"
          echo "export os=${os}" >> $BASH_ENV

          filename="codecov"
          [[ $os == "windows" ]] && filename+=".exe"
          echo "export filename=${filename}" >> $BASH_ENV
          [[ $os == "macos" ]] && brew install gpg
          curl -Os "https://uploader.codecov.io/latest/${os}/${filename}"
        name: Download Codecov Uploader
        when: always
    - run:
        command: |
          source $BASH_ENV
          curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
          curl -Os "https://uploader.codecov.io/latest/${os}/${filename}.SHA256SUM"
          curl -Os "https://uploader.codecov.io/latest/${os}/${filename}.SHA256SUM.sig"
          gpgv $filename.SHA256SUM.sig $filename.SHA256SUM
          shasum -a 256 -c $filename.SHA256SUM || sha256sum -c $filename.SHA256SUM
        name: Validate Codecov Uploader
    - run:
        command: |
          unset NODE_OPTIONS  # See https://github.com/codecov/uploader/issues/475
          source $BASH_ENV
          chmod +x $filename
          [ -n "bazel-out/_coverage/_coverage_report.dat" ] && set - "${@}" "-f" "bazel-out/_coverage/_coverage_report.dat"
          [ -n "" ] && set - "${@}" ""
          ./$filename \
            -Q "codecov-circleci-orb-3.2.2" \
            -t "${CODECOV_TOKEN}" \
            -n "${CIRCLE_BUILD_NUM}" \
            -F "" \
            ${@}
        name: Upload Coverage Results
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bcm-opennsa:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/bcm/standalone/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bcm:opennsa
    - CC: clang
    - CXX: clang++
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bcm
        command: |
          bazel build --config=release //stratum/hal/bin/bcm/standalone:stratum_bcm_opennsa_deb
          cp bazel-bin/stratum/hal/bin/bcm/standalone/stratum_bcm_opennsa_deb.deb $DOCKER_SCOPE/stratum_bcm_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bfrt-9.7.0:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/barefoot/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bfrt:latest-9.7.0
    - CC: clang
    - CXX: clang++
    - SDE_INSTALL_TAR: /tmp/bf-sde-tars/bf-sde-9.7.0-install.tgz
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: |
          aws s3 sync \
            s3://stratum-artifacts /tmp/bf-sde-tars  \
            --exclude "*" --include "bf-sde-*-install.tgz"
        name: S3 Sync
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bfrt
        command: |
          bazel build --config=release //stratum/hal/bin/barefoot:stratum_bfrt_deb
          cp bazel-bin/stratum/hal/bin/barefoot/stratum_bfrt_deb.deb $DOCKER_SCOPE/stratum_bfrt_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bfrt-9.10.0:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/barefoot/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bfrt:latest-9.10.0
    - CC: clang
    - CXX: clang++
    - SDE_INSTALL_TAR: /tmp/bf-sde-tars/bf-sde-9.10.0-install.tgz
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: |
          aws s3 sync \
            s3://stratum-artifacts /tmp/bf-sde-tars  \
            --exclude "*" --include "bf-sde-*-install.tgz"
        name: S3 Sync
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bfrt
        command: |
          bazel build --config=release //stratum/hal/bin/barefoot:stratum_bfrt_deb
          cp bazel-bin/stratum/hal/bin/barefoot/stratum_bfrt_deb.deb $DOCKER_SCOPE/stratum_bfrt_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bfrt-9.9.0:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/barefoot/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bfrt:latest-9.9.0
    - CC: clang
    - CXX: clang++
    - SDE_INSTALL_TAR: /tmp/bf-sde-tars/bf-sde-9.9.0-install.tgz
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: |
          aws s3 sync \
            s3://stratum-artifacts /tmp/bf-sde-tars  \
            --exclude "*" --include "bf-sde-*-install.tgz"
        name: S3 Sync
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bfrt
        command: |
          bazel build --config=release //stratum/hal/bin/barefoot:stratum_bfrt_deb
          cp bazel-bin/stratum/hal/bin/barefoot/stratum_bfrt_deb.deb $DOCKER_SCOPE/stratum_bfrt_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  cdlang_tests:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    resource_class: small
    environment:
    - CC: clang
    - CXX: clang++
    steps:
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build CDLang targets
        command: xargs -a .circleci/cdlang-targets.txt bazel build --config=ci-small
    - run:
        name: Analyze Bazel profile
        command: |
          bazel analyze-profile /tmp/bazel.profile.json
    - store_artifacts:
        path: /tmp/bazel.profile.json
    - run:
        name: Test CDLang targets
        command: xargs -a .circleci/cdlang-targets.txt bazel test --config=ci-small
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  license-check:
    docker:
    - image: fsfe/reuse:latest
    resource_class: small
    steps:
    - checkout
    - run:
        name: Run reuse
        command: reuse lint
  publish-docker-mininet:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: .
    - DOCKER_FILE: tools/mininet/Dockerfile
    - DOCKER_IMG: opennetworking/mn-stratum
    - CC: clang
    - CXX: clang++
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum-bmv2
        command: |
          bazel build --config=release //stratum/hal/bin/bmv2:stratum_bmv2_deb
          cp bazel-bin/stratum/hal/bin/bmv2/stratum_bmv2_deb.deb $DOCKER_SCOPE
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Check that Mininet Docker image has all required shared objects
        command: |
          docker run --entrypoint stratum_bmv2 $DOCKER_IMG -version
          docker run --entrypoint mn $DOCKER_IMG --version
          docker run --rm --entrypoint python3 $DOCKER_IMG -c "from p4.config.v1 import p4info_pb2;from google.rpc import status_pb2, code_pb2;from p4.v1 import p4runtime_pb2, p4runtime_pb2_grpc"
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  lint-and-style-checks:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    resource_class: small
    steps:
    - checkout
    - run:
        when: always
        name: Run clang-format script
        command: .circleci/check-cpp-format.sh
    - run:
        when: always
        name: Run cpplint script
        command: .circleci/check-cpplint.sh
    - run:
        when: always
        name: Run buildifier script
        command: .circleci/check-bazel-format.sh
  unit_tests:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    resource_class: large
    environment:
    - CC: clang
    - CXX: clang++
    steps:
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Query all Stratum targets
        command: bazel query '//...'
    - run:
        name: Build Stratum targets
        command: xargs -a .circleci/build-targets.txt bazel build --config=ci-large
    - run:
        name: Analyze Bazel profile
        command: |
          bazel analyze-profile /tmp/bazel.profile.json
    - store_artifacts:
        path: /tmp/bazel.profile.json
    - run:
        name: Test Stratum targets
        command: xargs -a .circleci/test-targets.txt bazel test --config=ci-large
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-build:
    machine: true
    environment:
    - DOCKER_SCOPE: .
    - DOCKER_FILE: Dockerfile.build
    - DOCKER_IMG: STRATUM_BUILDER_IMAGE
    steps:
    - run:
        command: |
          if [[ -z $DOCKER_LOGIN ]]; then
            circleci-agent step halt
          fi
    - checkout
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
  publish-docker-stratum-bfrt-9.7.1:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/barefoot/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bfrt:latest-9.7.1
    - CC: clang
    - CXX: clang++
    - SDE_INSTALL_TAR: /tmp/bf-sde-tars/bf-sde-9.7.1-install.tgz
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: |
          aws s3 sync \
            s3://stratum-artifacts /tmp/bf-sde-tars  \
            --exclude "*" --include "bf-sde-*-install.tgz"
        name: S3 Sync
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bfrt
        command: |
          bazel build --config=release //stratum/hal/bin/barefoot:stratum_bfrt_deb
          cp bazel-bin/stratum/hal/bin/barefoot/stratum_bfrt_deb.deb $DOCKER_SCOPE/stratum_bfrt_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bfrt-9.7.2:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/barefoot/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bfrt:latest-9.7.2
    - CC: clang
    - CXX: clang++
    - SDE_INSTALL_TAR: /tmp/bf-sde-tars/bf-sde-9.7.2-install.tgz
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: |
          aws s3 sync \
            s3://stratum-artifacts /tmp/bf-sde-tars  \
            --exclude "*" --include "bf-sde-*-install.tgz"
        name: S3 Sync
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bfrt
        command: |
          bazel build --config=release //stratum/hal/bin/barefoot:stratum_bfrt_deb
          cp bazel-bin/stratum/hal/bin/barefoot/stratum_bfrt_deb.deb $DOCKER_SCOPE/stratum_bfrt_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  markdown-style-check:
    machine: true
    steps:
    - checkout
    - run:
        name: Run markdownlint script
        command: .circleci/check-markdown.sh
  publish-docker-stratum-tools:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/tools
    - DOCKER_FILE: Dockerfile.stratum_tools
    - DOCKER_IMG: stratumproject/stratum-tools
    - HARBOR_IMG: tost/stratum-tools
    - CC: clang
    - CXX: clang++
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum tools package
        command: |
          bazel build --config=release //stratum/tools:stratum_tools_deb
          cp bazel-bin/stratum/tools/stratum_tools_deb.deb $DOCKER_SCOPE
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Harbor login
        command: echo $AETHER_HARBOR_PWD | docker login -u $AETHER_HARBOR_LOGIN --password-stdin registry.aetherproject.org
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Tag image for Harbor
        command: docker tag $DOCKER_IMG registry.aetherproject.org/$HARBOR_IMG
    - run:
        name: Test stratum-tools Docker image
        command: |
          docker run $DOCKER_IMG
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - run:
        name: Push Docker image to harbor
        command: docker push registry.aetherproject.org/$HARBOR_IMG
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bfrt-9.8.0:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/barefoot/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bfrt:latest-9.8.0
    - CC: clang
    - CXX: clang++
    - SDE_INSTALL_TAR: /tmp/bf-sde-tars/bf-sde-9.8.0-install.tgz
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: |
          aws s3 sync \
            s3://stratum-artifacts /tmp/bf-sde-tars  \
            --exclude "*" --include "bf-sde-*-install.tgz"
        name: S3 Sync
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bfrt
        command: |
          bazel build --config=release //stratum/hal/bin/barefoot:stratum_bfrt_deb
          cp bazel-bin/stratum/hal/bin/barefoot/stratum_bfrt_deb.deb $DOCKER_SCOPE/stratum_bfrt_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-p4c-fpm:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/p4c_backends/fpm
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/p4c-fpm
    - CC: clang
    - CXX: clang++
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build p4c-fpm
        command: |
          bazel build --config=release //stratum/p4c_backends/fpm:p4c_fpm_deb
          cp bazel-bin/stratum/p4c_backends/fpm/p4c_fpm_deb.deb $DOCKER_SCOPE
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Test p4c-fpm Docker image
        command: |
          docker run $DOCKER_IMG -version
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
  publish-docker-stratum-bcm-sdklt:
    docker:
    - image: STRATUM_BUILDER_IMAGE
    environment:
    - DOCKER_SCOPE: stratum/hal/bin/bcm/standalone/docker
    - DOCKER_FILE: Dockerfile
    - DOCKER_IMG: stratumproject/stratum-bcm:sdklt
    - CC: clang
    - CXX: clang++
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        keys:
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-main
    - run:
        name: Set bazelrc
        command: |
          cat .circleci/bazelrc >> .bazelrc
          rm -rf /tmp/bazel-cache/output-root/install/ec7bc80570c57e35507fafa6aadd57b1
    - run:
        name: Build stratum_bcm
        command: |
          bazel build --config=release //stratum/hal/bin/bcm/standalone:stratum_bcm_sdklt_deb
          cp bazel-bin/stratum/hal/bin/bcm/standalone/stratum_bcm_sdklt_deb.deb $DOCKER_SCOPE/stratum_bcm_deb.deb
    - run:
        name: Docker login
        command: echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
    - run:
        name: Build Docker image
        command: |
          docker pull $DOCKER_IMG || true
          cd $DOCKER_SCOPE
          docker build -f $DOCKER_FILE -t $DOCKER_IMG \
            --cache-from $DOCKER_IMG \
            --label org.opencontainers.image.source=$CIRCLE_REPOSITORY_URL  \
            --label org.opencontainers.image.version=$CIRCLE_SHA1 \
            --label org.opencontainers.image.revision=$CIRCLE_SHA1 \
            --label build-timestamp=$(date +%FT%T%z) \
            --label build-machine=circle-ci \
            .
    - run:
        name: Push Docker image
        command: docker push $DOCKER_IMG
    - run:
        name: Clean Bazel disk cache of files that have not been modified in 30 days
        command: /usr/bin/find /tmp/bazel-disk-cache -mtime +30 -exec rm -v {} \;
    - save_cache:
        when: always
        key: v5-bazel-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/bazel-cache
        - /tmp/bazel-disk-cache
        - /tmp/bf-sde-tars
workflows:
  version: 2
  build_and_test:
    jobs:
    - publish-docker-build
    - unit_tests:
        requires:
        - publish-docker-build
    - cdlang_tests:
        requires:
        - publish-docker-build
    - coverage:
        requires:
        - publish-docker-build
    - lint-and-style-checks:
        requires:
        - publish-docker-build
    - license-check
    - markdown-style-check
  docker-publish:
    jobs:
    - publish-docker-build:
        filters:
          branches:
            only: main
    - publish-docker-mininet:
        requires:
        - publish-docker-build
    - publish-docker-p4c-fpm:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bcm-sdklt:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bcm-opennsa:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bfrt-9.7.0:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bfrt-9.7.1:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bfrt-9.7.2:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bfrt-9.8.0:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bfrt-9.9.0:
        requires:
        - publish-docker-build
    - publish-docker-stratum-bfrt-9.10.0:
        requires:
        - publish-docker-build
    - publish-docker-stratum-tools:
        requires:
        - publish-docker-build
